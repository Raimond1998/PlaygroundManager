
import java.awt.Component;
import java.awt.MouseInfo;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;
import playgroundmanager.PlayGraundManager;
import playgroundmanager.kid;
import playgroundmanager.playSite;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author raimo
 */
public class Play extends javax.swing.JFrame {

    /**
     * Creates new form Play
     */
    
    private PlayGraundManager GraundManager = new PlayGraundManager();
    private Games Games = new Games(this, true);
    private static final String CurateInformation="Made by R.Å .";
    
    public Play() {
        initComponents();
        this.jPanelKID.setVisible(false);
        this.jPanelPlaySite.setVisible(false);
        this.jPanelControl.setVisible(false);
        this.jPanelMeniu.setVisible(true);
    }
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        Delete = new javax.swing.JMenuItem();
        GoPlay = new javax.swing.JMenuItem();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        Delete1 = new javax.swing.JMenuItem();
        jPopupMenu3 = new javax.swing.JPopupMenu();
        Remuve = new javax.swing.JMenuItem();
        jPopupMenu4 = new javax.swing.JPopupMenu();
        Remuve1 = new javax.swing.JMenuItem();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanelMeniu = new javax.swing.JPanel();
        jToggleButton4 = new javax.swing.JToggleButton();
        jToggleButton5 = new javax.swing.JToggleButton();
        jToggleButton6 = new javax.swing.JToggleButton();
        jToggleButton7 = new javax.swing.JToggleButton();
        jPanelControl = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanelKID = new javax.swing.JPanel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jTextFieldKidName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldKidTicket = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldKidAge = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableOfKind = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldKidName1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldKidTicket1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldKidAge1 = new javax.swing.JTextField();
        jCheckBox2 = new javax.swing.JCheckBox();
        jToggleButton2 = new javax.swing.JToggleButton();
        jPanelPlaySite = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableOfPlaySite = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListKidsPlay = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListQueue = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldNameOfPlaySite = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        Date date = new Date();
        SpinnerDateModel sm =
        new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        jSpinner1 = new javax.swing.JSpinner(sm);
        Date date1 = new Date();
        SpinnerDateModel sm1 =
        new SpinnerDateModel(date1, null, null, Calendar.HOUR_OF_DAY);
        jSpinner2 = new javax.swing.JSpinner(sm1);
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        SpinnerModel modelLLL =
        new SpinnerNumberModel(0,  0, 1000000, 1);
        jSpinner3 = new javax.swing.JSpinner(modelLLL);
        jToggleButton3 = new javax.swing.JToggleButton();
        jLabelOfSetePlayID = new javax.swing.JLabel();
        jLabelOfSetePlayID1 = new javax.swing.JLabel();
        jLabelOfSetePlayID2 = new javax.swing.JLabel();
        jLabelOfSetePlayID3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });
        jPopupMenu1.add(Delete);

        GoPlay.setText("Go play");
        GoPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoPlayActionPerformed(evt);
            }
        });
        jPopupMenu1.add(GoPlay);

        Delete1.setText("Delete");
        Delete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete1ActionPerformed(evt);
            }
        });
        jPopupMenu2.add(Delete1);

        Remuve.setText("Remuve");
        Remuve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemuveActionPerformed(evt);
            }
        });
        jPopupMenu3.add(Remuve);

        Remuve1.setText("Remuve");
        Remuve1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Remuve1ActionPerformed(evt);
            }
        });
        jPopupMenu4.add(Remuve1);

        jScrollPane5.setViewportView(jTree1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(600, 600));
        setMinimumSize(new java.awt.Dimension(600, 600));
        setPreferredSize(new java.awt.Dimension(600, 600));
        getContentPane().setLayout(null);

        jPanelMeniu.setMaximumSize(new java.awt.Dimension(600, 600));
        jPanelMeniu.setMinimumSize(new java.awt.Dimension(600, 600));
        jPanelMeniu.setPreferredSize(new java.awt.Dimension(600, 600));
        jPanelMeniu.setLayout(null);

        jToggleButton4.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jToggleButton4.setText("Exit");
        jToggleButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton4ActionPerformed(evt);
            }
        });
        jPanelMeniu.add(jToggleButton4);
        jToggleButton4.setBounds(160, 340, 260, 50);

        jToggleButton5.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jToggleButton5.setText("KIDS ");
        jToggleButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton5ActionPerformed(evt);
            }
        });
        jPanelMeniu.add(jToggleButton5);
        jToggleButton5.setBounds(160, 130, 260, 50);

        jToggleButton6.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jToggleButton6.setText("Play Site ");
        jToggleButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton6ActionPerformed(evt);
            }
        });
        jPanelMeniu.add(jToggleButton6);
        jToggleButton6.setBounds(160, 200, 260, 50);

        jToggleButton7.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jToggleButton7.setText("History");
        jToggleButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton7ActionPerformed(evt);
            }
        });
        jPanelMeniu.add(jToggleButton7);
        jToggleButton7.setBounds(160, 270, 260, 50);

        getContentPane().add(jPanelMeniu);
        jPanelMeniu.setBounds(0, 0, 600, 600);

        jPanelControl.setMaximumSize(new java.awt.Dimension(600, 600));
        jPanelControl.setMinimumSize(new java.awt.Dimension(600, 600));
        jPanelControl.setPreferredSize(new java.awt.Dimension(600, 600));
        jPanelControl.setLayout(null);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kid ID ", "Kid Name", "Play site ID", "Play site name", "Time of start", "Time of end"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
        }

        jPanelControl.add(jScrollPane6);
        jScrollPane6.setBounds(20, 20, 560, 560);

        getContentPane().add(jPanelControl);
        jPanelControl.setBounds(0, 0, 600, 600);

        jPanelKID.setMaximumSize(new java.awt.Dimension(600, 600));
        jPanelKID.setMinimumSize(new java.awt.Dimension(600, 600));
        jPanelKID.setPreferredSize(new java.awt.Dimension(600, 600));
        jPanelKID.setLayout(null);

        jToggleButton1.setText("Add kid");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });
        jPanelKID.add(jToggleButton1);
        jToggleButton1.setBounds(410, 260, 99, 21);
        jPanelKID.add(jTextFieldKidName);
        jTextFieldKidName.setBounds(350, 150, 108, 32);

        jLabel1.setText("kid Name:");
        jPanelKID.add(jLabel1);
        jLabel1.setBounds(350, 120, 108, 21);

        jTextFieldKidTicket.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldKidTicketKeyReleased(evt);
            }
        });
        jPanelKID.add(jTextFieldKidTicket);
        jTextFieldKidTicket.setBounds(460, 150, 108, 32);

        jLabel2.setText("Num of tickets:");
        jPanelKID.add(jLabel2);
        jLabel2.setBounds(460, 120, 108, 21);

        jTextFieldKidAge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldKidAgeKeyReleased(evt);
            }
        });
        jPanelKID.add(jTextFieldKidAge);
        jTextFieldKidAge.setBounds(350, 220, 108, 32);

        jLabel3.setText("kid age:");
        jPanelKID.add(jLabel3);
        jLabel3.setBounds(350, 190, 108, 21);

        jCheckBox1.setText("Or vip?");
        jPanelKID.add(jCheckBox1);
        jCheckBox1.setBounds(470, 220, 96, 32);

        jTableOfKind.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Tickets", "Age", "Or Vip"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableOfKind.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableOfKindMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTableOfKind);
        if (jTableOfKind.getColumnModel().getColumnCount() > 0) {
            jTableOfKind.getColumnModel().getColumn(0).setResizable(false);
            jTableOfKind.getColumnModel().getColumn(1).setResizable(false);
            jTableOfKind.getColumnModel().getColumn(2).setResizable(false);
            jTableOfKind.getColumnModel().getColumn(3).setResizable(false);
            jTableOfKind.getColumnModel().getColumn(4).setResizable(false);
        }

        jPanelKID.add(jScrollPane2);
        jScrollPane2.setBounds(50, 80, 280, 240);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel4.setText("      Kids");
        jPanelKID.add(jLabel4);
        jLabel4.setBounds(140, 50, 142, 22);
        jPanelKID.add(jTextFieldKidName1);
        jTextFieldKidName1.setBounds(50, 360, 108, 32);

        jLabel5.setText("kid Name:");
        jPanelKID.add(jLabel5);
        jLabel5.setBounds(50, 330, 108, 21);

        jLabel6.setText("Num of tickets:");
        jPanelKID.add(jLabel6);
        jLabel6.setBounds(160, 330, 108, 21);

        jTextFieldKidTicket1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldKidTicket1KeyReleased(evt);
            }
        });
        jPanelKID.add(jTextFieldKidTicket1);
        jTextFieldKidTicket1.setBounds(160, 360, 108, 32);

        jLabel7.setText("kid age:");
        jPanelKID.add(jLabel7);
        jLabel7.setBounds(50, 410, 108, 21);

        jTextFieldKidAge1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldKidAge1KeyReleased(evt);
            }
        });
        jPanelKID.add(jTextFieldKidAge1);
        jTextFieldKidAge1.setBounds(50, 440, 108, 32);

        jCheckBox2.setText("Or vip?");
        jPanelKID.add(jCheckBox2);
        jCheckBox2.setBounds(170, 440, 96, 32);

        jToggleButton2.setText("Update");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });
        jPanelKID.add(jToggleButton2);
        jToggleButton2.setBounds(290, 400, 107, 35);

        getContentPane().add(jPanelKID);
        jPanelKID.setBounds(0, 0, 600, 600);

        jPanelPlaySite.setMaximumSize(new java.awt.Dimension(600, 600));
        jPanelPlaySite.setMinimumSize(new java.awt.Dimension(600, 600));
        jPanelPlaySite.setPreferredSize(new java.awt.Dimension(600, 600));
        jPanelPlaySite.setLayout(null);

        jTableOfPlaySite.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "All place", "Know play", "Players in %", "Hour of start", "Hour of end", "Visters"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableOfPlaySite.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableOfPlaySiteMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTableOfPlaySite);
        if (jTableOfPlaySite.getColumnModel().getColumnCount() > 0) {
            jTableOfPlaySite.getColumnModel().getColumn(0).setResizable(false);
            jTableOfPlaySite.getColumnModel().getColumn(1).setResizable(false);
            jTableOfPlaySite.getColumnModel().getColumn(2).setResizable(false);
            jTableOfPlaySite.getColumnModel().getColumn(3).setResizable(false);
            jTableOfPlaySite.getColumnModel().getColumn(4).setResizable(false);
            jTableOfPlaySite.getColumnModel().getColumn(5).setResizable(false);
            jTableOfPlaySite.getColumnModel().getColumn(6).setResizable(false);
            jTableOfPlaySite.getColumnModel().getColumn(7).setResizable(false);
        }

        jPanelPlaySite.add(jScrollPane1);
        jScrollPane1.setBounds(0, 10, 600, 219);

        jListKidsPlay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jListKidsPlayMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jListKidsPlay);

        jPanelPlaySite.add(jScrollPane3);
        jScrollPane3.setBounds(10, 260, 108, 130);

        jListQueue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jListQueueMouseReleased(evt);
            }
        });
        jScrollPane4.setViewportView(jListQueue);

        jPanelPlaySite.add(jScrollPane4);
        jScrollPane4.setBounds(460, 260, 117, 130);

        jLabel8.setText("      Now play");
        jPanelPlaySite.add(jLabel8);
        jLabel8.setBounds(20, 390, 83, 28);

        jLabel9.setText("   Wait in queue");
        jPanelPlaySite.add(jLabel9);
        jLabel9.setBounds(470, 400, 83, 28);
        jPanelPlaySite.add(jTextFieldNameOfPlaySite);
        jTextFieldNameOfPlaySite.setBounds(170, 260, 108, 30);

        jLabel10.setText("Name");
        jPanelPlaySite.add(jLabel10);
        jLabel10.setBounds(170, 240, 108, 13);

        jLabel11.setText("Place");
        jPanelPlaySite.add(jLabel11);
        jLabel11.setBounds(320, 240, 50, 20);

        JSpinner.DateEditor de = new JSpinner.DateEditor(jSpinner1, "HH:mm:ss");
        jSpinner1.setEditor(de);
        jPanelPlaySite.add(jSpinner1);
        jSpinner1.setBounds(170, 320, 100, 32);

        JSpinner.DateEditor de1 = new JSpinner.DateEditor(jSpinner2, "HH:mm:ss");
        jSpinner2.setEditor(de1);
        jPanelPlaySite.add(jSpinner2);
        jSpinner2.setBounds(320, 320, 101, 32);

        jLabel12.setText("Star time");
        jPanelPlaySite.add(jLabel12);
        jLabel12.setBounds(170, 300, 60, 20);

        jLabel13.setText("End time");
        jPanelPlaySite.add(jLabel13);
        jLabel13.setBounds(320, 300, 50, 20);
        jPanelPlaySite.add(jSpinner3);
        jSpinner3.setBounds(320, 260, 101, 30);

        jToggleButton3.setText("Add play site");
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });
        jPanelPlaySite.add(jToggleButton3);
        jToggleButton3.setBounds(240, 390, 100, 21);
        jPanelPlaySite.add(jLabelOfSetePlayID);
        jLabelOfSetePlayID.setBounds(480, 240, 70, 13);
        jPanelPlaySite.add(jLabelOfSetePlayID1);
        jLabelOfSetePlayID1.setBounds(20, 240, 20, 13);
        jPanelPlaySite.add(jLabelOfSetePlayID2);
        jLabelOfSetePlayID2.setBounds(500, 240, 80, 13);
        jPanelPlaySite.add(jLabelOfSetePlayID3);
        jLabelOfSetePlayID3.setBounds(40, 240, 80, 13);

        getContentPane().add(jPanelPlaySite);
        jPanelPlaySite.setBounds(0, 0, 600, 600);

        jMenu1.setText("Meniu");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        jMenu3.setText("...");

        jMenuItem1.setText("Kids");
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseReleased(evt);
            }
        });
        jMenu3.add(jMenuItem1);
        jMenu3.add(jSeparator1);

        jMenuItem2.setText("Play site");
        jMenuItem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItem2MouseReleased(evt);
            }
        });
        jMenu3.add(jMenuItem2);
        jMenu3.add(jSeparator2);

        jMenuItem3.setText("History");
        jMenuItem3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItem3MouseReleased(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        setSize(new java.awt.Dimension(629, 652));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldKidAgeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldKidAgeKeyReleased
        try {
            this.jTextFieldKidAge.setText(this.ch(this.jTextFieldKidAge.getText()));
        } catch (Exception ex) {}
    }//GEN-LAST:event_jTextFieldKidAgeKeyReleased

    private void jTextFieldKidTicketKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldKidTicketKeyReleased
         try {
            this.jTextFieldKidTicket.setText(this.ch(this.jTextFieldKidTicket.getText()));
        } catch (Exception ex) {}
    }//GEN-LAST:event_jTextFieldKidTicketKeyReleased

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        if(this.jTextFieldKidName.getText().trim().length()==0){
            JOptionPane.showMessageDialog(this,  "Name must be written", CurateInformation, JOptionPane.ERROR_MESSAGE);
         return;}
        if(this.jTextFieldKidTicket.getText().trim().length()==0){
            JOptionPane.showMessageDialog(this,  "Ticket must be written", CurateInformation, JOptionPane.ERROR_MESSAGE);
         return;}
        if(this.jTextFieldKidAge.getText().trim().length()==0){
            JOptionPane.showMessageDialog(this,  "Age must be written", CurateInformation, JOptionPane.ERROR_MESSAGE);
        return;}
        
        this.GraundManager.addKid(new kid(Integer.parseInt(this.jTextFieldKidTicket.getText()), this.jTextFieldKidName.getText(), 
                Integer.parseInt(this.jTextFieldKidAge.getText()), this.jCheckBox1.isSelected() ));
        this.updateListOfKid();
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        this.GraundManager.removeKidByID(this.jTableOfKind.getSelectedRow());
        this.jPopupMenu1.setVisible(false);
        this.updateListOfKid();
    }//GEN-LAST:event_DeleteActionPerformed

    private void jTableOfKindMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableOfKindMouseReleased
        Component frame=null;
        if(evt.isPopupTrigger())
        if(0<this.jTableOfKind.getRowCount())
        this.jPopupMenu1.show(frame, MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        if(0<this.jTableOfKind.getRowCount()){
            this.jTextFieldKidName1.setText(this.GraundManager.getKids().get(this.jTableOfKind.getSelectedRow()).getName());
            this.jTextFieldKidTicket1.setText(this.GraundManager.getKids().get(this.jTableOfKind.getSelectedRow()).getNumOfTicket()+"");
            this.jTextFieldKidAge1.setText(this.GraundManager.getKids().get(this.jTableOfKind.getSelectedRow()).getAge()+"");
            this.jCheckBox2.setSelected(this.GraundManager.getKids().get(this.jTableOfKind.getSelectedRow()).OrVip());
            
        }
    }//GEN-LAST:event_jTableOfKindMouseReleased

    private void jTextFieldKidTicket1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldKidTicket1KeyReleased
         try {
            this.jTextFieldKidTicket1.setText(this.ch(this.jTextFieldKidTicket1.getText()));
        } catch (Exception ex) {}
    }//GEN-LAST:event_jTextFieldKidTicket1KeyReleased

    private void jTextFieldKidAge1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldKidAge1KeyReleased
        try {
            this.jTextFieldKidAge1.setText(this.ch(this.jTextFieldKidAge1.getText()));
        } catch (Exception ex) {}
    }//GEN-LAST:event_jTextFieldKidAge1KeyReleased

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        if(this.jTableOfKind.getSelectedRow()<0)
          return;
        if(this.jTextFieldKidName1.getText().trim().length()==0){
            JOptionPane.showMessageDialog(this,  "Name must be 1 symbol or more", CurateInformation, JOptionPane.ERROR_MESSAGE);
         return;}
        if(this.jTextFieldKidTicket1.getText().trim().length()==0){
            JOptionPane.showMessageDialog(this,  "Ticket must be 1 symbol or more", CurateInformation, JOptionPane.ERROR_MESSAGE);
         return;}
        if(this.jTextFieldKidAge1.getText().trim().length()==0){
            JOptionPane.showMessageDialog(this,  "Age must be 1 symbol or more", CurateInformation, JOptionPane.ERROR_MESSAGE);
        return;}
        
        this.GraundManager.getKids().get(this.jTableOfKind.getSelectedRow()).setName(this.jTextFieldKidName1.getText());
        this.GraundManager.getKids().get(this.jTableOfKind.getSelectedRow()).setAge(Integer.parseInt(this.jTextFieldKidAge1.getText()));
        this.GraundManager.getKids().get(this.jTableOfKind.getSelectedRow()).setNumOfTicket(Integer.parseInt(this.jTextFieldKidTicket1.getText()));
        this.GraundManager.getKids().get(this.jTableOfKind.getSelectedRow()).setOrVip(this.jCheckBox2.isSelected());
        
        this.jTextFieldKidName1.setText("");
        this.jTextFieldKidAge1.setText("");
        this.jTextFieldKidTicket1.setText("");
        this.jCheckBox2.setSelected(false);
        this.updateListOfKid();
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jTableOfPlaySiteMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableOfPlaySiteMouseReleased
        Component frame= null;
        if(evt.isPopupTrigger())
        if(0<this.jTableOfPlaySite.getRowCount())
        this.jPopupMenu2.show(frame, MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        if(0<this.jTableOfPlaySite.getRowCount()){
            this.updatejListKidsPlay(this.jTableOfPlaySite.getSelectedRow());
            this.upadatejListQueue(this.jTableOfPlaySite.getSelectedRow());
         }
      
    }//GEN-LAST:event_jTableOfPlaySiteMouseReleased

    private void Delete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete1ActionPerformed
        this.GraundManager.removePlaySiteByID(this.jTableOfPlaySite.getSelectedRow());
        updatejTableOfPlaySite();
          this.jPopupMenu2.setVisible(false);
    }//GEN-LAST:event_Delete1ActionPerformed

    private void RemuveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemuveActionPerformed
       if(this.jLabelOfSetePlayID1.getText().trim().length()==0)
           return;
       
      int kidID=Integer.parseInt(this.jListKidsPlay.getSelectedValue().toString().split(" ")[1]);
      
        this.GraundManager.getPlaySites().get(Integer.parseInt(this.jLabelOfSetePlayID.getText())).removeKid(kidID);
        updatejListKidsPlay(Integer.parseInt(this.jLabelOfSetePlayID.getText()));
        
          this.jPopupMenu3.setVisible(false);
    }//GEN-LAST:event_RemuveActionPerformed

    private void jListKidsPlayMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListKidsPlayMouseReleased
        Component frame=null;
        if(evt.isPopupTrigger())
         if(!this.jListKidsPlay.isSelectionEmpty())
        this.jPopupMenu3.show(frame, MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        
        
    }//GEN-LAST:event_jListKidsPlayMouseReleased

    private void jMenuItem1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MouseReleased
      this.jPanelKID.setVisible(true);
      this.jPanelPlaySite.setVisible(false);
      this.jPanelControl.setVisible(false);
      this.jPanelMeniu.setVisible(false);
       updateListOfKid();
    }//GEN-LAST:event_jMenuItem1MouseReleased

    private void jMenuItem2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem2MouseReleased
      this.jPanelKID.setVisible(false);
      this.jPanelPlaySite.setVisible(true);
      this.jPanelControl.setVisible(false);
      this.jPanelMeniu.setVisible(false);
      updatejTableOfPlaySite();
    }//GEN-LAST:event_jMenuItem2MouseReleased

    private void jMenuItem3MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem3MouseReleased
      this.jPanelKID.setVisible(false);
      this.jPanelPlaySite.setVisible(false);
      this.jPanelControl.setVisible(true);
      this.jPanelMeniu.setVisible(false);
      upadateHistory();
    }//GEN-LAST:event_jMenuItem3MouseReleased

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
      this.jPanelKID.setVisible(false);
      this.jPanelPlaySite.setVisible(false);
      this.jPanelControl.setVisible(false);
      this.jPanelMeniu.setVisible(true);
    }//GEN-LAST:event_jMenu1MouseClicked

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
         if(this.jTextFieldNameOfPlaySite.getText().trim().length()==0){
              JOptionPane.showMessageDialog(this,  "Name must be 1 symbol or more", CurateInformation, JOptionPane.ERROR_MESSAGE);
         return;
         }
        
         Date TimeEnd = new Date();
         Date timeOfStart = new Date();
        try {
            TimeEnd = new SimpleDateFormat("HH:mm:ss").parse(this.jSpinner2.getValue().toString().substring(10, 18));
            timeOfStart = new SimpleDateFormat("HH:mm:ss").parse(this.jSpinner1.getValue().toString().substring(10, 18));
       } catch (ParseException ex) {
          Logger.getLogger(Play.class.getName()).log(Level.SEVERE, null, ex);
       }
         if(!TimeEnd.after(timeOfStart)){
            JOptionPane.showMessageDialog(this,  "time of start canby after time of end", CurateInformation, JOptionPane.ERROR_MESSAGE);
            return;
        }
         this.GraundManager.addPlaySite(new playSite(this.jTextFieldNameOfPlaySite.getText(), this.jSpinner3.getComponentCount(),  
                                       timeOfStart, TimeEnd));
         
         this.updatejTableOfPlaySite();
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jToggleButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton5ActionPerformed
      this.jPanelKID.setVisible(true);
      this.jPanelPlaySite.setVisible(false);
      this.jPanelControl.setVisible(false);
      this.jPanelMeniu.setVisible(false);
       updateListOfKid();
    }//GEN-LAST:event_jToggleButton5ActionPerformed

    private void jToggleButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton6ActionPerformed
      this.jPanelKID.setVisible(false);
      this.jPanelPlaySite.setVisible(true);
      this.jPanelControl.setVisible(false);
      this.jPanelMeniu.setVisible(false);
      updatejTableOfPlaySite();
    }//GEN-LAST:event_jToggleButton6ActionPerformed

    private void jToggleButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton7ActionPerformed
      this.jPanelKID.setVisible(false);
      this.jPanelPlaySite.setVisible(false);
      this.jPanelControl.setVisible(true);
      this.jPanelMeniu.setVisible(false);
      upadateHistory();
      
    }//GEN-LAST:event_jToggleButton7ActionPerformed

    private void jToggleButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton4ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jToggleButton4ActionPerformed

    private void jListQueueMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListQueueMouseReleased
        Component frame=null;
        if(evt.isPopupTrigger())
         if(!this.jListQueue.isSelectionEmpty())
        this.jPopupMenu4.show(frame, MouseInfo.getPointerInfo().getLocation().x, MouseInfo.getPointerInfo().getLocation().y);
        
        
    }//GEN-LAST:event_jListQueueMouseReleased

    private void Remuve1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Remuve1ActionPerformed
        if(this.jLabelOfSetePlayID1.getText().trim().length()==0)
           return;
       
      int kidID=Integer.parseInt(this.jListQueue.getSelectedValue().toString().split(" ")[1]);
      
        this.GraundManager.getPlaySites().get(Integer.parseInt(this.jLabelOfSetePlayID.getText())).removeQueue(kidID);
        
        upadatejListQueue(Integer.parseInt(this.jLabelOfSetePlayID.getText()));
        
          this.jPopupMenu4.setVisible(false);
    }//GEN-LAST:event_Remuve1ActionPerformed

    private void GoPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoPlayActionPerformed
        int kidID=this.jTableOfKind.getSelectedRow();
        this.Games.setPlaySiteID(-1);
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
         DefaultTableModel modelOfTable = (DefaultTableModel) this.jTableOfPlaySite.getModel();
         modelOfTable.getDataVector().removeAllElements();
         for(int i=0; i<this.GraundManager.getPlaySites().size(); i++)
         modelOfTable.addRow(new Object[]{i, this.GraundManager.getPlaySites().get(i).getName(), this.GraundManager.getPlaySites().get(i).getDefaultPlace(),
                            this.GraundManager.getPlaySites().get(i).getKidsID().size(), this.GraundManager.EmploymentOfPlaySiteByID(i), 
                            sdf.format(this.GraundManager.getPlaySites().get(i).getTimeOfStart()), sdf.format(this.GraundManager.getPlaySites().get(i).getTimeOfEnd()), 
                            this.GraundManager.getPlaySites().get(i).getVisiter()});        
        this.Games.setModalToTable(modelOfTable);
         this.jPopupMenu1.setVisible(false);
        this.Games.setVisible(true);
        int playSiteID=this.Games.getPlaySiteID();
        if(playSiteID!=-1 || kidID!=-1){
          this.GraundManager.sendKindToPlay(kidID, playSiteID);
        }
        updateListOfKid();
    }//GEN-LAST:event_GoPlayActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Play.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Play.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Play.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Play.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Play().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Delete;
    private javax.swing.JMenuItem Delete1;
    private javax.swing.JMenuItem GoPlay;
    private javax.swing.JMenuItem Remuve;
    private javax.swing.JMenuItem Remuve1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelOfSetePlayID;
    private javax.swing.JLabel jLabelOfSetePlayID1;
    private javax.swing.JLabel jLabelOfSetePlayID2;
    private javax.swing.JLabel jLabelOfSetePlayID3;
    private javax.swing.JList<String> jListKidsPlay;
    private javax.swing.JList<String> jListQueue;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuCheckBox;
    private javax.swing.JMenu jMenuCheckBox1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanelControl;
    private javax.swing.JPanel jPanelKID;
    private javax.swing.JPanel jPanelMeniu;
    private javax.swing.JPanel jPanelPlaySite;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JPopupMenu jPopupMenu3;
    private javax.swing.JPopupMenu jPopupMenu4;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemIncome;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemIncome1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTableOfKind;
    private javax.swing.JTable jTableOfPlaySite;
    private javax.swing.JTextField jTextFieldKidAge;
    private javax.swing.JTextField jTextFieldKidAge1;
    private javax.swing.JTextField jTextFieldKidName;
    private javax.swing.JTextField jTextFieldKidName1;
    private javax.swing.JTextField jTextFieldKidTicket;
    private javax.swing.JTextField jTextFieldKidTicket1;
    private javax.swing.JTextField jTextFieldNameOfPlaySite;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    private javax.swing.JToggleButton jToggleButton5;
    private javax.swing.JToggleButton jToggleButton6;
    private javax.swing.JToggleButton jToggleButton7;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
     
     private void updateListOfKid(){
         DefaultTableModel modelOfTable = (DefaultTableModel) this.jTableOfKind.getModel();
         modelOfTable.getDataVector().removeAllElements();
         for(int i=0; i<this.GraundManager.getKids().size(); i++)
         modelOfTable.addRow(new Object[]{i, this.GraundManager.getKids().get(i).getName(), this.GraundManager.getKids().get(i).getNumOfTicket(),
                             this.GraundManager.getKids().get(i).getAge(), this.GraundManager.getKids().get(i).OrVip()});
         this.jTableOfKind.setModel(modelOfTable);
     }
     
     private void updatejTableOfPlaySite(){
         SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
         DefaultTableModel modelOfTablee = (DefaultTableModel) this.jTableOfPlaySite.getModel();
         modelOfTablee.getDataVector().removeAllElements();
         for(int i=0; i<this.GraundManager.getPlaySites().size(); i++)
         modelOfTablee.addRow(new Object[]{i, this.GraundManager.getPlaySites().get(i).getName(), this.GraundManager.getPlaySites().get(i).getDefaultPlace(),
                            this.GraundManager.getPlaySites().get(i).getKidsID().size(), this.GraundManager.EmploymentOfPlaySiteByID(i), 
                            sdf.format(this.GraundManager.getPlaySites().get(i).getTimeOfStart()), sdf.format(this.GraundManager.getPlaySites().get(i).getTimeOfEnd()), 
                            this.GraundManager.getPlaySites().get(i).getVisiter()});
         this.jTableOfPlaySite.setModel(modelOfTablee);
     
     }
     
     private void updatejListKidsPlay(int PlaySiteID){
          DefaultListModel model = new DefaultListModel();
          model.removeAllElements();
         for(int i=0; i<this.GraundManager.getPlaySites().get(PlaySiteID).getKidsID().size(); i++)
             model.addElement( this.GraundManager.getKidByID(this.GraundManager.getPlaySites().get(PlaySiteID).getKidsID().get(i)).getName()+" "+i);
        this.jLabelOfSetePlayID.setText(PlaySiteID+"");
        this.jLabelOfSetePlayID3.setText(" ID "+this.GraundManager.getPlaySites().get(PlaySiteID).getName());
         this.jListKidsPlay.setModel(model);
           
     }
     
     private void upadatejListQueue(int PlaySiteID){
         DefaultListModel model = new DefaultListModel();
          model.removeAllElements();
         for(int i=0; i<this.GraundManager.getPlaySites().get(PlaySiteID).getQueue().size(); i++)
             model.addElement(this.GraundManager.getKidByID(this.GraundManager.getPlaySites().get(PlaySiteID).getQueue().get(i)).getName()+" "+i);
           
         this.jListQueue.setModel(model);
           this.jLabelOfSetePlayID1.setText(PlaySiteID+"");
           this.jLabelOfSetePlayID2.setText(" ID "+this.GraundManager.getPlaySites().get(PlaySiteID).getName());
     }
     
     private void upadateHistory(){
      SimpleDateFormat sdf = new SimpleDateFormat("dd HH:mm");
      DefaultTableModel modelOfTable = (DefaultTableModel) this.jTable1.getModel();
         modelOfTable.getDataVector().removeAllElements();
         
         for(int i=0; i<this.GraundManager.getPlaySites().size(); i++)
             for(int y=0; y<this.GraundManager.getPlaySites().get(i).getHistory().size(); y++)
         modelOfTable.addRow(new Object[]{ this.GraundManager.getPlaySites().get(i).getHistory().get(y).getKidID(),
         this.GraundManager.getKidByID(this.GraundManager.getPlaySites().get(i).getHistory().get(y).getKidID()).getName(),
         i, this.GraundManager.getPlaySites().get(i).getName(), sdf.format(this.GraundManager.getPlaySites().get(i).getHistory().get(y).getTimeOfStart()),
        sdf.format(this.GraundManager.getPlaySites().get(i).getHistory().get(y).getTimeOfEnd())
         });
         this.jTable1.setModel(modelOfTable);
     
     }
     
     private String ch(String str) throws Exception{
    
           if(str!=null && str.trim()!="")
           if(!(str.charAt(0)=='1' || str.charAt(0)=='2' || str.charAt(0)=='3' || str.charAt(0)=='4'
                || str.charAt(0)=='5' || str.charAt(0)=='6' || str.charAt(0)=='7' || str.charAt(0)=='8'
                 || str.charAt(0)=='9' || str.charAt(0)=='0')){
          str=(str.substring(0, str.length()-1));
          }
           for(int i=0; i<str.length(); i++){
             if(str.charAt(i)=='1' || str.charAt(i)=='2' || str.charAt(i)=='3' || str.charAt(i)=='4'
                || str.charAt(i)=='5' || str.charAt(i)=='6' || str.charAt(i)=='7' || str.charAt(i)=='8'
                 || str.charAt(i)=='9' || str.charAt(i)=='0'){
              
             }
             else{
                if(str!=null && str.trim()!="")
               str=(str.substring(0, str.length()-1));
             }
             }
           
    return str;
    }
}
